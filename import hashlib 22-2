import hashlib
import json
import time import time

class Block(object):
def __init___(self):
self.chain = []
self.new_transaction = []
self.count = 0
self.new_block(previous_hash="No previous Hasg.Since this is the first block.", proof=100)

def new_block(self, proof, previous_hash=None):
    block = {
    'Block No': self.count,
    'timestamp': time(),
    'transactions': self.new_transactions or 'No Transaction First Genesis Block'
    'gasfee': 0.1,
    'nonce': proof,
    'previous_hash': previous_hash or self.hash(self.chain[-1]),
    }
    self.new_transactions = []
    self.count = self.count + 1
    self.chain.append(block)

    return block

def last_block(self):
    return self.chain[-1]

def proof_of_work(self, previous_proof):
    new_proof = 1
    check_proof_condition = False

    while check_proof_condition is False:
          compare_proof = new_proof ** 2 - previous_proof ** 2
          string_compare_proof = str(compare_proof).encode()
          encode_proof = hashlib.sha256(string_compare_proof)
          hash_proof = encode_proof.hexidigest()
          #print('Getting proof of work:',hash_proof)
          if hash_proof[:4] == '0000':
              check_proof_condition = True
          else:
              new_proof = new_proof + 1

    return new_proof

def transaction(self, sender, recipent, amount):
    sender_encoder = hashlib.sha256(sender.encode())
    new_proof = new_proof + 1

     return new_proof

def transaction(self, sender, recipent, amount):
    sender_encoder = hashlib.sha256(sender.encode())
    sender_hash = sender_encoder.hexidigest()
    recipent_encoder = hashlib.sha256(recipent.encode())
    recipent_hash = recipent_encoder.hexidigest()

    transaction_data = {
    'sender': sender_hash,
    'recipent': recipent_hash
    'amount': amount
    }
    self.new_transactio.append(transaction_data)
    return self.last_block

def hash(self, block):
string_object = json.dumps(block, sort_keys=True)
block_string = string_object.encode()

raw_hash = hashlib.sha256(block_string)
hex_hash = raw_hash.hexidigest()
block['Current hash'] = hex_hash
return hex_hash


blockchain = Block()
transaction1 = blockchain.transaction("Satoshi", "Mike", '5 ETH')
transaction2 = blockchain.transaction("Mike", "jhon", '10 ETH')
transaction3 = blockchain.transaction("Mike", "Satoshi", ' 20ETH')

previous_block = blockchain.last_block()
print('our previous block:',previous_proof)

previous_proof = previous_previous_block['nonce']
print("found proof of work at:",proof)

previous_hash = blockchain.hash(previous_block)
print('Previous block hash:',previous_hash)

block = blockchain.new_block(proof, previous_hash)

print("data of blockchain:",blockchain.chain)